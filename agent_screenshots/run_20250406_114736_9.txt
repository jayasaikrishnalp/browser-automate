 SystemMessage 
You are an AI agent designed to automate browser tasks. Your goal is to accomplish the ultimate task following the rules.

# Input Format
Task
Previous steps
Current URL
Open Tabs
Interactive Elements
[index]<type>text</type>
- index: Numeric identifier for interaction
- type: HTML element type (button, input, etc.)
- text: Element description
Example:
[33]<button>Submit Form</button>

- Only elements with numeric indexes in [] are interactive
- elements without [] provide only context

# Response Rules
1. RESPONSE FORMAT: You must ALWAYS respond with valid JSON in this exact format:
{"current_state": {"evaluation_previous_goal": "Success|Failed|Unknown - Analyze the current elements and the image to check if the previous goals/actions are successful like intended by the task. Mention if something unexpected happened. Shortly state why/why not",
"memory": "Description of what has been done and what you need to remember. Be very specific. Count here ALWAYS how many times you have done something and how many remain. E.g. 0 out of 10 websites analyzed. Continue with abc and xyz",
"next_goal": "What needs to be done with the next immediate action"},
"action":[{"one_action_name": {// action-specific parameter}}, // ... more actions in sequence]}

2. ACTIONS: You can specify multiple actions in the list to be executed in sequence. But always specify only one action name per item. Use maximum {max_actions} actions per sequence.
Common action sequences:
- Form filling: [{"input_text": {"index": 1, "text": "username"}}, {"input_text": {"index": 2, "text": "password"}}, {"click_element": {"index": 3}}]
- Navigation and extraction: [{"go_to_url": {"url": "https://example.com"}}, {"extract_content": {"goal": "extract the names"}}]
- Actions are executed in the given order
- If the page changes after an action, the sequence is interrupted and you get the new state.
- Only provide the action sequence until an action which changes the page state significantly.
- Try to be efficient, e.g. fill forms at once, or chain actions where nothing changes on the page
- only use multiple actions if it makes sense.

3. ELEMENT INTERACTION:
- Only use indexes of the interactive elements
- Elements marked with "[]Non-interactive text" are non-interactive

4. NAVIGATION & ERROR HANDLING:
- If no suitable elements exist, use other functions to complete the task
- If stuck, try alternative approaches - like going back to a previous page, new search, new tab etc.
- Handle popups/cookies by accepting or closing them
- Use scroll to find elements you are looking for
- If you want to research something, open a new tab instead of using the current tab
- If captcha pops up, try to solve it - else try a different approach
- If the page is not fully loaded, use wait action

5. TASK COMPLETION:
- Use the done action as the last action as soon as the ultimate task is complete
- Dont use "done" before you are done with everything the user asked you, except you reach the last step of max_steps. 
- If you reach your last step, use the done action even if the task is not fully finished. Provide all the information you have gathered so far. If the ultimate task is completly finished set success to true. If not everything the user asked for is completed set success in done to false!
- If you have to do something repeatedly for example the task says for "each", or "for all", or "x times", count always inside "memory" how many times you have done it and how many remain. Don't stop until you have completed like the task asked you. Only call done after the last step.
- Don't hallucinate actions
- Make sure you include everything you found out for the ultimate task in the done text parameter. Do not just say you are done, but include the requested information of the task. 

6. VISUAL CONTEXT:
- When an image is provided, use it to understand the page layout
- Bounding boxes with labels on their top right corner correspond to element indexes

7. Form filling:
- If you fill an input field and your action sequence is interrupted, most often something changed e.g. suggestions popped up under the field.

8. Long tasks:
- Keep track of the status and subresults in the memory. 

9. Extraction:
- If your task is to find information - call extract_content on the specific pages to get and store the information.
Your responses must be always JSON with the specified format.

 HumanMessage 
Your ultimate task is: """Access the URL. https://058264522852.signin.aws.amazon.com/console?region=us-east-1
Username: kk_labs_user_673801
Password: wfqjqrCRy@G5

Create python lambda function""". If you achieved your ultimate task, stop everything and use the done action in the next step to complete the task. If not, continue as usual.

 HumanMessage 
Example output:

 AIMessage 


 ToolMessage 
Browser started

 HumanMessage 
[Your task history memory starts here]

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: üîó  Navigated to https://058264522852.signin.aws.amazon.com/console?region=us-east-1

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: ‚å®Ô∏è  Input 058264522852 into index 3

 HumanMessage 
Action result: ‚å®Ô∏è  Input kk_labs_user_673801 into index 4

 HumanMessage 
Action result: ‚å®Ô∏è  Input wfqjqrCRy@G5 into index 5

 HumanMessage 
Action result: üñ±Ô∏è  Clicked button with index 7: Sign in

 AIMessage 


 ToolMessage 


 AIMessage 


 ToolMessage 


 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: üñ±Ô∏è  Clicked button with index 16: Run

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: üñ±Ô∏è  Clicked button with index 15: Create a function

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: ‚å®Ô∏è  Input MyPythonFunction into index 23

 HumanMessage 
Action result: üñ±Ô∏è  Clicked button with index 25: Node.js 22.x

 HumanMessage 
[Task history memory ends]
[Current state starts here]
The following is one-time information - if you need to remember it write it to memory:
Current url: https://us-east-1.console.aws.amazon.com/lambda/home?region=us-east-1#/create/function?firstrun=true
Available tabs:
[TabInfo(page_id=0, url='https://us-east-1.console.aws.amazon.com/lambda/home?region=us-east-1#/create/function?firstrun=true', title='Create function | Functions | Lambda')]
Interactive elements from top layer of the current page inside the viewport:
[Start of page]
[0]<div Service menu
You can access all AWS services here. There are sections for recently visited and you can save your favorite services too.
Services
Recently visited
Favorites
All applications
All services
Analytics
Application Integration
Blockchain
Business Applications
Cloud Financial Management
Compute
Containers
Customer Enablement
Database
Developer Tools
End User Computing
Front-end Web & Mobile
Game Development
Internet of Things
Machine Learning
Management & Governance
Media Services
Migration & Transfer
Networking & Content Delivery
Quantum Technologies
Robotics
Satellite
Security, Identity, & Compliance
Storage
Recently visited
Lambda
Run code without thinking about servers
Console Home
View resource insights, service shortcuts, and feature updates
Recently visited
Favorites
All applications
All services
Analytics
Application Integration
Blockchain
Business Applications
Cloud Financial Management
Compute
Containers
Customer Enablement
Database
Developer Tools
End User Computing
Front-end Web & Mobile
Game Development
Internet of Things
Machine Learning
Management & Governance
Media Services
Migration & Transfer
Networking & Content Delivery
Quantum Technologies
Robotics
Satellite
Security, Identity, & Compliance
Storage
Recently visited
Lambda
Run code without thinking about servers
Console Home
View resource insights, service shortcuts, and feature updates
[Option+S]
More
Help & support
Support
Support Center
Expert Help
re:Post
Documentation
Training
Getting Started Resource Center
Send feedback
Settings
Current user settings
Language
Browser default
Visual mode
-
beta
Browser default
Light
Dark
See all user settings
Regions
Current Region
N. Virginia
us-east-1
United States
N. Virginia
us-east-1
Ohio
us-east-2
N. California
us-west-1
Oregon
us-west-2
Asia Pacific
Mumbai
ap-south-1
Osaka
ap-northeast-3
Seoul
ap-northeast-2
Singapore
ap-southeast-1
Sydney
ap-southeast-2
Tokyo
ap-northeast-1
Canada
Central
ca-central-1
Europe
Frankfurt
eu-central-1
Ireland
eu-west-1
London
eu-west-2
Paris
eu-west-3
Stockholm
eu-north-1
South America
S√£o Paulo
sa-east-1
There are 15 Regions that are not enabled for this account
Manage Regions
|
Manage Local Zones
Account
Account ID
0582-6452-2852
IAM user
kk_labs_user_673801
Account
Organization
Service Quotas
Billing and Cost Management
Security credentials
Turn on multi-session support
Switch role
Sign out/>
[1]<a AWS Console Home/>
[2]<a Skip to Main Content/>
[3]<button Services;false/>
[4]<button submit>Next/>
[5]<input Search;search;combobox/>
[6]<a CloudShell/>
[7]<button Notifications (none available)/>
[8]<button false/>
[9]<button Settings;false/>
[10]<button combobox;false;Regions (United States (N. Virginia))>United States (N. Virginia)/>
[11]<button false>kk_labs_user_673801 @ 0582-6452-2852/>
[12]<div Lambda
...
Functions
Create function
Lambda
Dashboard
Applications
Functions
Additional resources
Code signing configurations
Event source mappings
Layers
Replicas
Related AWS resources
Step Functions state machines
Create function
Info
:
Choose one of the following options to create your function.
Basic information
Function name
Enter a name that describes the purpose of your function.
Function name must be 1 to 64 characters, must be unique to the Region, and can‚Äôt include spaces. Valid characters are a-z, A-Z, 0-9, hyphens (-), and underscores (_).
Runtime
Choose the language to use to write your function. Note that the console code editor supports only Node.js, Python, and Ruby.
Architecture
Info
:
Choose the instruction set architecture you want for your function code.
x86_64
arm64
Permissions
Info
:
By default, Lambda will create an execution role with permissions to upload logs to Amazon CloudWatch Logs. You can customize this default role later when adding triggers.
Execution role
Choose a role that defines the permissions of your function. To create a custom role, go to the
IAM console
.
Create a new role with basic Lambda permissions
Use an existing role
Create a new role from AWS policy templates
Role creation might take a few minutes. Please do not delete the role or edit the trust or permissions policies in this role.
Lambda will create an execution role named MyPythonFunction-role-b5yubwbk, with permission to upload logs to Amazon CloudWatch Logs.
Enable Code signing
Info
:
Use code signing configurations to ensure that the code has been signed by an approved source and has not been altered since signing.
Enable encryption with an AWS KMS customer managed key
Info
:
By default, Lambda encrypts the .zip file archive using an AWS owned key.
Enable function URL
Info
:
Use function URLs to assign HTTP(S) endpoints to your Lambda function.
Enable tags
Info
:
A tag is a label that you assign to an AWS resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources, track your AWS costs, and enforce attribute-based access control.
Enable VPC
Info
:
Connect your function to a VPC to access private resources during invocation.
Info
Tutorials
Learn how to implement common use cases in AWS Lambda.
Create a simple web app
In this tutorial you will learn how to:
Build a simple web app, consisting of a Lambda function with a function URL that outputs a webpage
Invoke your function through its function URL
Learn more
Start tutorial/>
[13]<button false;Open side navigation/>
[14]<button Open help panel;false/>
[15]<button false;View Amazon Q panel/>
[16]<div Author from scratch
Start with a simple Hello World example./>
[17]<input awsui-tiles-:r4s:;authorFromScratch;radio/>
[18]<div />
[19]<span Use a blueprint
Build a Lambda application from sample code and configuration presets for common use cases./>
[20]<div />
[21]<span Container image
Select a container image to deploy for your function./>
[22]<input awsui-tiles-:r4s:;authorFromImage;radio/>
[23]<input MyPythonFunction;text;myFunctionName/>
[24]<a Info for create runtime (shows in sidebar).;button>Info
:/>
[25]<button true>Node.js 22.x/>
[26]<button submit;Refresh/>
[27]<div button;false>Change default execution role/>
[28]<div Additional Configurations
Use additional configurations to set up code signing, function URL, tags, and Amazon VPC access for your function./>
[29]<button submit>Cancel/>
[30]<button submit>Create function/>
[31]<div ¬©
2025
,
Amazon Web Services, Inc.
or its affiliates./>
[32]<div />
[33]<button Open CloudShell>CloudShell/>
[34]<button Feedback/>
[35]<ul />
[36]<a Privacy/>
[37]<a Terms/>
[38]<button Cookie preferences/>
[39]<ul listbox>Ruby 3.3
Amazon Linux 2
OS-only runtime for Go, Rust, C++, custom/>
[40]<li option>Latest supported/>
[41]<li option>.NET 8 (C#/F#/PowerShell)/>
[42]<li option>Java 21/>
[43]<li option>Node.js 22.x/>
[44]<li option>Python 3.13/>
[45]<li option>Ruby 3.4/>
[46]<li option>Amazon Linux 2023
OS-only runtime for Go, Rust, C++, custom/>
[47]<li option>Other supported/>
[48]<li option>Java 8 on Amazon Linux 2/>
[49]<li option>Java 11/>
[50]<li option>Java 17/>
[51]<li option>Node.js 18.x/>
[52]<li option>Node.js 20.x/>
[53]<li option>Python 3.9/>
[54]<li option>Python 3.10/>
[55]<li option>Python 3.11/>
[56]<li option>Python 3.12/>
[57]<li option>Ruby 3.2/>
[End of page]
Current step: 8/100Current date and time: 2025-04-06 11:49

 RESPONSE
{
  "current_state": {
    "evaluation_previous_goal": "Success - I clicked on the runtime dropdown and now I can see the list of available runtimes, including Python options",
    "memory": "I have accessed the AWS console using the provided credentials (Username: kk_labs_user_673801, Password: wfqjqrCRy@G5). I'm now on the 'Create function' page where I'm configuring a Python Lambda function. I've entered 'MyPythonFunction' as the function name and need to select Python as the runtime instead of the default Node.js. Currently at step 8/100.",
    "next_goal": "Select Python 3.13 as the runtime for the Lambda function"
  },
  "action": [
    {
      "click_element": {
        "index": 44
      }
    }
  ]
}